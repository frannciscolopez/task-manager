{"ast":null,"code":"const JSON_FILENAME = 'tasks.json';\nconst TASKS = 'tasks';\nconst CURRENT_ID = 'currentId';\nexport const loadTasksFromJsonFile = () => {\n  try {\n    const jsonTasks = localStorage.getItem(JSON_FILENAME);\n    return jsonTasks ? JSON.parse(jsonTasks) : [];\n  } catch (error) {\n    console.error('Error loading tasks:', error);\n    return [];\n  }\n};\nconst saveTasksToJsonFile = tasks => {\n  try {\n    const jsonTasks = JSON.stringify(tasks, null, 2);\n    localStorage.setItem(JSON_FILENAME, jsonTasks);\n  } catch (error) {\n    console.error('Error saving tasks:', error);\n  }\n};\nexport const addTaskToJson = task => {\n  const existingTasks = loadTasksFromJsonFile();\n  const updatedTasks = [...existingTasks, task];\n  saveTasksToJsonFile(updatedTasks);\n};\n\n// Remove a task from JSON file by task ID\nexport const removeTaskFromJson = taskId => {\n  const existingTasks = loadTasksFromJsonFile();\n  const updatedTasks = existingTasks.filter(task => task.id !== taskId);\n  saveTasksToJsonFile(updatedTasks);\n};\n\n// Update a task in JSON file by task ID\nexport const updateTaskFieldInJson = (taskId, fieldToUpdate, updatedValue) => {\n  const existingTasks = loadTasksFromJsonFile();\n  const updatedTasks = existingTasks.map(task => {\n    if (task.id === taskId) {\n      return {\n        ...task,\n        [fieldToUpdate]: updatedValue\n      };\n    }\n    return task;\n  });\n  saveTasksToJsonFile(updatedTasks);\n};\nexport function initializeTasksAndCurrentId(setTasks, setCurrentId) {\n  const storedTasks = JSON.parse(localStorage.getItem(TASKS)) || [];\n  const storedCurrentId = JSON.parse(localStorage.getItem(CURRENT_ID)) || 0;\n  setTasks(storedTasks);\n  setCurrentId(storedCurrentId);\n}\nexport function updateLocalStorage(key, value) {\n  localStorage.setItem(key, JSON.stringify(value));\n}\nexport function addTask(newTask, currentId, tasks, setTasks, setCurrentId) {\n  newTask.id = currentId;\n  setCurrentId(currentId + 1);\n  const updatedTasks = [...tasks, newTask];\n  setTasks(updatedTasks);\n  updateLocalStorage(TASKS, updatedTasks);\n  updateLocalStorage(CURRENT_ID, currentId + 1);\n}\nexport function deleteTask(taskId, tasks, setTasks) {\n  const updatedTasks = tasks.filter(task => task.id !== parseInt(taskId));\n  setTasks(updatedTasks);\n  updateLocalStorage(TASKS, updatedTasks);\n}\nexport function updateTask(taskId, fieldToUpdate, newValue, tasks, setTasks) {\n  const taskIndex = tasks.findIndex(task => task.id === parseInt(taskId));\n  if (taskIndex === -1) {\n    console.error('Task not found with the provided ID.');\n    return;\n  }\n  const updatedTasks = [...tasks];\n  updatedTasks[taskIndex] = {\n    ...updatedTasks[taskIndex],\n    [fieldToUpdate]: newValue\n  };\n  setTasks(updatedTasks);\n  updateLocalStorage(TASKS, updatedTasks);\n}","map":{"version":3,"names":["JSON_FILENAME","TASKS","CURRENT_ID","loadTasksFromJsonFile","jsonTasks","localStorage","getItem","JSON","parse","error","console","saveTasksToJsonFile","tasks","stringify","setItem","addTaskToJson","task","existingTasks","updatedTasks","removeTaskFromJson","taskId","filter","id","updateTaskFieldInJson","fieldToUpdate","updatedValue","map","initializeTasksAndCurrentId","setTasks","setCurrentId","storedTasks","storedCurrentId","updateLocalStorage","key","value","addTask","newTask","currentId","deleteTask","parseInt","updateTask","newValue","taskIndex","findIndex"],"sources":["/Users/franciscolopezmartinez/Desktop/task-manager-test/src/helper.js"],"sourcesContent":["const JSON_FILENAME = 'tasks.json';\n\nconst TASKS = 'tasks';\nconst CURRENT_ID = 'currentId';\n\nexport const loadTasksFromJsonFile = () => {\n  try {\n    const jsonTasks = localStorage.getItem(JSON_FILENAME);\n    return jsonTasks ? JSON.parse(jsonTasks) : [];\n  } catch (error) {\n    console.error('Error loading tasks:', error);\n    return [];\n  }\n};\n\nconst saveTasksToJsonFile = (tasks) => {\n  try {\n    const jsonTasks = JSON.stringify(tasks, null, 2);\n    localStorage.setItem(JSON_FILENAME, jsonTasks);\n  } catch (error) {\n    console.error('Error saving tasks:', error);\n  }\n};\n\nexport const addTaskToJson = (task) => {\n  const existingTasks = loadTasksFromJsonFile();\n  const updatedTasks = [...existingTasks, task];\n  saveTasksToJsonFile(updatedTasks);\n};\n\n// Remove a task from JSON file by task ID\nexport const removeTaskFromJson = (taskId) => {\n  const existingTasks = loadTasksFromJsonFile();\n  const updatedTasks = existingTasks.filter((task) => task.id !== taskId);\n  saveTasksToJsonFile(updatedTasks);\n};\n\n// Update a task in JSON file by task ID\nexport const updateTaskFieldInJson = (taskId, fieldToUpdate, updatedValue) => {\n  const existingTasks = loadTasksFromJsonFile();\n  const updatedTasks = existingTasks.map((task) => {\n    if (task.id === taskId) {\n      return {\n        ...task,\n        [fieldToUpdate]: updatedValue,\n      };\n    }\n    return task;\n  });\n  saveTasksToJsonFile(updatedTasks);\n};\n\nexport function initializeTasksAndCurrentId(setTasks, setCurrentId) {\n    const storedTasks = JSON.parse(localStorage.getItem(TASKS)) || [];\n    const storedCurrentId = JSON.parse(localStorage.getItem(CURRENT_ID)) || 0;\n    setTasks(storedTasks);\n    setCurrentId(storedCurrentId);\n  }\n  \n  export function updateLocalStorage(key, value) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n  \n  export function addTask(\n    newTask,\n    currentId,\n    tasks,\n    setTasks,\n    setCurrentId\n  ) {\n    newTask.id = currentId;\n    setCurrentId(currentId + 1);\n  \n    const updatedTasks = [...tasks, newTask];\n    setTasks(updatedTasks);\n  \n    updateLocalStorage(TASKS, updatedTasks);\n    updateLocalStorage(CURRENT_ID, currentId + 1);\n  }\n  \n  export function deleteTask(taskId, tasks, setTasks) {\n    const updatedTasks = tasks.filter((task) => task.id !== parseInt(taskId));\n    setTasks(updatedTasks);\n    updateLocalStorage(TASKS, updatedTasks);\n  }\n  \n  export function updateTask(\n    taskId,\n    fieldToUpdate,\n    newValue,\n    tasks,\n    setTasks\n  ) {\n    const taskIndex = tasks.findIndex((task) => task.id === parseInt(taskId));\n  \n    if (taskIndex === -1) {\n      console.error('Task not found with the provided ID.');\n      return;\n    }\n  \n    const updatedTasks = [...tasks];\n    updatedTasks[taskIndex] = {\n      ...updatedTasks[taskIndex],\n      [fieldToUpdate]: newValue,\n    };\n  \n    setTasks(updatedTasks);\n    updateLocalStorage(TASKS, updatedTasks);\n  }\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}