{"ast":null,"code":"import { saveAs } from 'file-saver';\nconst [tasks, setTasks] = useState([]);\nuseEffect(() => {\n  // Load tasks from tasks.json when the component mounts\n  fetch('tasks.json').then(response => response.json()).then(data => setTasks(data)).catch(error => console.error('Error loading tasks:', error));\n}, []);\nconst saveTasksAsJSON = () => {\n  const jsonData = JSON.stringify(tasks, null, 2);\n  const blob = new Blob([jsonData], {\n    type: 'application/json'\n  });\n\n  // Save tasks to the same \"tasks.json\" file\n  saveAs(blob, 'tasks.json');\n};\nconst addTask = newTask => {\n  const updatedTasks = [...tasks, newTask];\n  setTasks(updatedTasks);\n  saveTasksAsJSON();\n};\nconst updateTask = (taskId, updatedTask) => {\n  const updatedTasks = tasks.map(task => task.id === taskId ? {\n    ...task,\n    ...updatedTask\n  } : task);\n  setTasks(updatedTasks);\n  saveTasksAsJSON();\n};\nconst removeTask = taskId => {\n  const updatedTasks = tasks.filter(task => task.id !== taskId);\n  setTasks(updatedTasks);\n  saveTasksAsJSON();\n};","map":{"version":3,"names":["saveAs","tasks","setTasks","useState","useEffect","fetch","then","response","json","data","catch","error","console","saveTasksAsJSON","jsonData","JSON","stringify","blob","Blob","type","addTask","newTask","updatedTasks","updateTask","taskId","updatedTask","map","task","id","removeTask","filter"],"sources":["/Users/franciscolopezmartinez/Desktop/task-manager-test/src/helper.js"],"sourcesContent":["import { saveAs } from 'file-saver';\n\nconst [tasks, setTasks] = useState([]);\n\nuseEffect(() => {\n  // Load tasks from tasks.json when the component mounts\n  fetch('tasks.json')\n    .then((response) => response.json())\n    .then((data) => setTasks(data))\n    .catch((error) => console.error('Error loading tasks:', error));\n}, []);\n\nconst saveTasksAsJSON = () => {\n  const jsonData = JSON.stringify(tasks, null, 2);\n  const blob = new Blob([jsonData], { type: 'application/json' });\n\n  // Save tasks to the same \"tasks.json\" file\n  saveAs(blob, 'tasks.json');\n};\n\nconst addTask = (newTask) => {\n  const updatedTasks = [...tasks, newTask];\n  setTasks(updatedTasks);\n  saveTasksAsJSON();\n};\n\nconst updateTask = (taskId, updatedTask) => {\n  const updatedTasks = tasks.map((task) =>\n    task.id === taskId ? { ...task, ...updatedTask } : task\n  );\n  setTasks(updatedTasks);\n  saveTasksAsJSON();\n};\n\nconst removeTask = (taskId) => {\n  const updatedTasks = tasks.filter((task) => task.id !== taskId);\n  setTasks(updatedTasks);\n  saveTasksAsJSON();\n};\n\n\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,YAAY;AAEnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;AAEtCC,SAAS,CAAC,MAAM;EACd;EACAC,KAAK,CAAC,YAAY,CAAC,CAChBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAC9BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;AACnE,CAAC,EAAE,EAAE,CAAC;AAEN,MAAME,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACf,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;EAC/C,MAAMgB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,QAAQ,CAAC,EAAE;IAAEK,IAAI,EAAE;EAAmB,CAAC,CAAC;;EAE/D;EACAnB,MAAM,CAACiB,IAAI,EAAE,YAAY,CAAC;AAC5B,CAAC;AAED,MAAMG,OAAO,GAAIC,OAAO,IAAK;EAC3B,MAAMC,YAAY,GAAG,CAAC,GAAGrB,KAAK,EAAEoB,OAAO,CAAC;EACxCnB,QAAQ,CAACoB,YAAY,CAAC;EACtBT,eAAe,CAAC,CAAC;AACnB,CAAC;AAED,MAAMU,UAAU,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAC1C,MAAMH,YAAY,GAAGrB,KAAK,CAACyB,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACC,EAAE,KAAKJ,MAAM,GAAG;IAAE,GAAGG,IAAI;IAAE,GAAGF;EAAY,CAAC,GAAGE,IACrD,CAAC;EACDzB,QAAQ,CAACoB,YAAY,CAAC;EACtBT,eAAe,CAAC,CAAC;AACnB,CAAC;AAED,MAAMgB,UAAU,GAAIL,MAAM,IAAK;EAC7B,MAAMF,YAAY,GAAGrB,KAAK,CAAC6B,MAAM,CAAEH,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAAC;EAC/DtB,QAAQ,CAACoB,YAAY,CAAC;EACtBT,eAAe,CAAC,CAAC;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}