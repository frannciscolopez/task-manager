{"ast":null,"code":"var _jsxFileName = \"/Users/franciscolopezmartinez/Desktop/task-manager-test/src/components/Card.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport OptionsPanel from './OptionsPanel';\nimport NewTask from './NewTask';\nimport ShowTask from './ShowTask';\nimport UpdateTask from './UpdateTask';\nimport RemoveTask from './RemoveTask';\nimport './Card.css';\nimport { addTask, removeTask, updateTask, loadTasksFromJsonFile } from '../helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAIN_CARD = 'main';\nconst NEW_TASK_CARD = 'newTask';\nconst SHOW_TASKS_CARD = 'showTasks';\nconst UPDATE_TASK_CARD = 'updateTask';\nconst REMOVE_TASK_CARD = 'removeTask';\nconst Card = () => {\n  _s();\n  const [currentCard, setCurrentCard] = useState('main');\n  const [tasks, setTasks] = useState([]);\n  const [currentId, setCurrentId] = useState(0);\n  const handleAddTask = newTask => {\n    addTask(newTask);\n  };\n  const handleDeleteTask = taskId => {\n    removeTask(taskId);\n  };\n  const handleUpdateTask = (taskId, fieldToUpdate, newValue) => {\n    updateTask(taskId, fieldToUpdate, newValue);\n  };\n  const changeCard = card => {\n    setCurrentCard(card);\n  };\n  const renderCard = () => {\n    switch (currentCard) {\n      case MAIN_CARD:\n        return /*#__PURE__*/_jsxDEV(OptionsPanel, {\n          changeCard: changeCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 16\n        }, this);\n      case NEW_TASK_CARD:\n        return /*#__PURE__*/_jsxDEV(NewTask, {\n          onAddTask: handleAddTask,\n          onBackToOptionsPanel: () => changeCard(MAIN_CARD)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, this);\n      case SHOW_TASKS_CARD:\n        return /*#__PURE__*/_jsxDEV(ShowTask, {\n          tasks: loadTasksFromJsonFile,\n          onBackToOptionsPanel: () => changeCard(MAIN_CARD)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 16\n        }, this);\n      case UPDATE_TASK_CARD:\n        return /*#__PURE__*/_jsxDEV(UpdateTask, {\n          onUpdateTask: handleUpdateTask,\n          onBackToOptionsPanel: () => changeCard(MAIN_CARD)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 16\n        }, this);\n      case REMOVE_TASK_CARD:\n        return /*#__PURE__*/_jsxDEV(RemoveTask, {\n          onDeleteTask: handleDeleteTask,\n          onBackToOptionsPanel: () => changeCard(MAIN_CARD)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: renderCard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n_s(Card, \"/n6Fts/L0UhoQI0y6AViOcYJA0I=\");\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","OptionsPanel","NewTask","ShowTask","UpdateTask","RemoveTask","addTask","removeTask","updateTask","loadTasksFromJsonFile","jsxDEV","_jsxDEV","MAIN_CARD","NEW_TASK_CARD","SHOW_TASKS_CARD","UPDATE_TASK_CARD","REMOVE_TASK_CARD","Card","_s","currentCard","setCurrentCard","tasks","setTasks","currentId","setCurrentId","handleAddTask","newTask","handleDeleteTask","taskId","handleUpdateTask","fieldToUpdate","newValue","changeCard","card","renderCard","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","onBackToOptionsPanel","onUpdateTask","onDeleteTask","className","children","_c","$RefreshReg$"],"sources":["/Users/franciscolopezmartinez/Desktop/task-manager-test/src/components/Card.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport OptionsPanel from './OptionsPanel';\nimport NewTask from './NewTask';\nimport ShowTask from './ShowTask';\nimport UpdateTask from './UpdateTask';\nimport RemoveTask from './RemoveTask';\n\nimport './Card.css';\n\nimport {\n    addTask,\n    removeTask,\n    updateTask,\n    loadTasksFromJsonFile\n  } from '../helper';\n\nconst MAIN_CARD = 'main';\nconst NEW_TASK_CARD = 'newTask';\nconst SHOW_TASKS_CARD = 'showTasks';\nconst UPDATE_TASK_CARD = 'updateTask';\nconst REMOVE_TASK_CARD = 'removeTask';\n\nconst Card = () => {\n\n    const [currentCard, setCurrentCard] = useState('main');\n    const [tasks, setTasks] = useState([]);\n    const [currentId, setCurrentId] = useState(0);\n    \n    const handleAddTask = (newTask) => {\n      addTask(newTask);\n    };\n  \n    const handleDeleteTask = (taskId) => {\n      removeTask(taskId);\n    };\n  \n    const handleUpdateTask = (taskId, fieldToUpdate, newValue) => {\n      updateTask(taskId, fieldToUpdate, newValue);\n    };\n  \n    const changeCard = (card) => {\n      setCurrentCard(card);\n    };\n\n  const renderCard = () => {\n    switch (currentCard) {\n      case MAIN_CARD:\n        return <OptionsPanel\n        changeCard={changeCard}/> ;\n      case NEW_TASK_CARD:\n        return <NewTask onAddTask={handleAddTask} onBackToOptionsPanel={() => changeCard(MAIN_CARD)} />;\n      case SHOW_TASKS_CARD:\n        return <ShowTask tasks={loadTasksFromJsonFile} onBackToOptionsPanel={() => changeCard(MAIN_CARD)} />;\n      case UPDATE_TASK_CARD:\n        return <UpdateTask onUpdateTask={handleUpdateTask} onBackToOptionsPanel={() => changeCard(MAIN_CARD)} />;\n      case REMOVE_TASK_CARD:\n        return <RemoveTask onDeleteTask={handleDeleteTask} onBackToOptionsPanel={() => changeCard(MAIN_CARD)} />;\n    }\n  };\n\n  return <div className=\"card-container\">{renderCard()}</div>;\n};\n\nexport default Card;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}